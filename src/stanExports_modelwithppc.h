// Generated by rstantools.  Do not edit by hand.

/*
    bayesianTiterCalc is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bayesianTiterCalc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bayesianTiterCalc.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_modelwithppc_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_modelwithppc");
    reader.add_event(64, 62, "end", "model_modelwithppc");
    return reader;
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
logistic(const T0__& a,
             const T1__& b,
             const T2__& concentration, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        stan::math::assign(prob,(1 / (1 + stan::math::exp(-((a + (b * concentration)))))));
        current_statement_begin__ = 4;
        return stan::math::promote_scalar<fun_return_scalar_t__>(prob);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct logistic_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& a,
             const T1__& b,
             const T2__& concentration, std::ostream* pstream__) const {
        return logistic(a, b, concentration, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_modelwithppc
  : public stan::model::model_base_crtp<model_modelwithppc> {
private:
        int N;
        std::vector<int> nreplicates;
        std::vector<int> survival;
        std::vector<int> dilution;
        int nsample;
        std::vector<int> sample;
        int is_log;
public:
    model_modelwithppc(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_modelwithppc(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_modelwithppc_namespace::model_modelwithppc";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 10;
            validate_non_negative_index("nreplicates", "N", N);
            context__.validate_dims("data initialization", "nreplicates", "int", context__.to_vec(N));
            nreplicates = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("nreplicates");
            pos__ = 0;
            size_t nreplicates_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < nreplicates_k_0_max__; ++k_0__) {
                nreplicates[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("survival", "N", N);
            context__.validate_dims("data initialization", "survival", "int", context__.to_vec(N));
            survival = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("survival");
            pos__ = 0;
            size_t survival_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < survival_k_0_max__; ++k_0__) {
                survival[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("dilution", "N", N);
            context__.validate_dims("data initialization", "dilution", "int", context__.to_vec(N));
            dilution = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("dilution");
            pos__ = 0;
            size_t dilution_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < dilution_k_0_max__; ++k_0__) {
                dilution[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "nsample", "int", context__.to_vec());
            nsample = int(0);
            vals_i__ = context__.vals_i("nsample");
            pos__ = 0;
            nsample = vals_i__[pos__++];
            current_statement_begin__ = 14;
            validate_non_negative_index("sample", "N", N);
            context__.validate_dims("data initialization", "sample", "int", context__.to_vec(N));
            sample = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("sample");
            pos__ = 0;
            size_t sample_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < sample_k_0_max__; ++k_0__) {
                sample[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "is_log", "int", context__.to_vec());
            is_log = int(0);
            vals_i__ = context__.vals_i("is_log");
            pos__ = 0;
            is_log = vals_i__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 19;
            num_params_r__ += 1;
            current_statement_begin__ = 20;
            num_params_r__ += 1;
            current_statement_begin__ = 21;
            validate_non_negative_index("phi", "nsample", nsample);
            num_params_r__ += (1 * nsample);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_modelwithppc() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 19;
        if (!(context__.contains_r("a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "a", "double", context__.to_vec());
        double a(0);
        a = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 20;
        if (!(context__.contains_r("b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "b", "double", context__.to_vec());
        double b(0);
        b = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 21;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "nsample", nsample);
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec(nsample));
        std::vector<double> phi(nsample, double(0));
        size_t phi_k_0_max__ = nsample;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            phi[k_0__] = vals_r__[pos__++];
        }
        size_t phi_i_0_max__ = nsample;
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 19;
            local_scalar_t__ a;
            (void) a;  // dummy to suppress unused var warning
            if (jacobian__)
                a = in__.scalar_lb_constrain(0, lp__);
            else
                a = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 20;
            local_scalar_t__ b;
            (void) b;  // dummy to suppress unused var warning
            if (jacobian__)
                b = in__.scalar_lb_constrain(0, lp__);
            else
                b = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 21;
            std::vector<local_scalar_t__> phi;
            size_t phi_d_0_max__ = nsample;
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    phi.push_back(in__.scalar_lb_constrain(0));
            }
            // model body
            current_statement_begin__ = 25;
            for (int i = 1; i <= N; ++i) {
                {
                current_statement_begin__ = 26;
                local_scalar_t__ concentration(DUMMY_VAR__);
                (void) concentration;  // dummy to suppress unused var warning
                stan::math::initialize(concentration, DUMMY_VAR__);
                stan::math::fill(concentration, DUMMY_VAR__);
                current_statement_begin__ = 27;
                if (as_bool(logical_eq(is_log, 1))) {
                    current_statement_begin__ = 28;
                    stan::math::assign(concentration, stan::math::log((get_base1(phi, get_base1(sample, i, "sample", 1), "phi", 1) / get_base1(dilution, i, "dilution", 1))));
                } else {
                    current_statement_begin__ = 30;
                    stan::math::assign(concentration, (get_base1(phi, get_base1(sample, i, "sample", 1), "phi", 1) / get_base1(dilution, i, "dilution", 1)));
                }
                current_statement_begin__ = 32;
                lp_accum__.add(binomial_log<propto__>(get_base1(survival, i, "survival", 1), get_base1(nreplicates, i, "nreplicates", 1), logistic(a, b, concentration, pstream__)));
                }
            }
            current_statement_begin__ = 36;
            lp_accum__.add(cauchy_log<propto__>(a, 0, 10));
            current_statement_begin__ = 37;
            lp_accum__.add(cauchy_log<propto__>(b, 0, 10));
            current_statement_begin__ = 38;
            lp_accum__.add(lognormal_log<propto__>(phi, stan::math::log(6), 0.5));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("a");
        names__.push_back("b");
        names__.push_back("phi");
        names__.push_back("survival_sim");
        names__.push_back("prob");
        names__.push_back("ed50");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nsample);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nsample);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_modelwithppc_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double a = in__.scalar_lb_constrain(0);
        vars__.push_back(a);
        double b = in__.scalar_lb_constrain(0);
        vars__.push_back(b);
        std::vector<double> phi;
        size_t phi_d_0_max__ = nsample;
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.scalar_lb_constrain(0));
        }
        size_t phi_k_0_max__ = nsample;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 42;
            validate_non_negative_index("survival_sim", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> survival_sim(N);
            stan::math::initialize(survival_sim, DUMMY_VAR__);
            stan::math::fill(survival_sim, DUMMY_VAR__);
            current_statement_begin__ = 43;
            validate_non_negative_index("prob", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> prob(N);
            stan::math::initialize(prob, DUMMY_VAR__);
            stan::math::fill(prob, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("ed50", "nsample", nsample);
            std::vector<double> ed50(nsample, double(0));
            stan::math::initialize(ed50, DUMMY_VAR__);
            stan::math::fill(ed50, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 46;
            for (int i = 1; i <= N; ++i) {
                {
                current_statement_begin__ = 47;
                local_scalar_t__ concentration(DUMMY_VAR__);
                (void) concentration;  // dummy to suppress unused var warning
                stan::math::initialize(concentration, DUMMY_VAR__);
                stan::math::fill(concentration, DUMMY_VAR__);
                current_statement_begin__ = 48;
                if (as_bool(logical_eq(is_log, 1))) {
                    current_statement_begin__ = 49;
                    stan::math::assign(concentration, stan::math::log((get_base1(phi, get_base1(sample, i, "sample", 1), "phi", 1) / get_base1(dilution, i, "dilution", 1))));
                } else {
                    current_statement_begin__ = 51;
                    stan::math::assign(concentration, (get_base1(phi, get_base1(sample, i, "sample", 1), "phi", 1) / get_base1(dilution, i, "dilution", 1)));
                }
                current_statement_begin__ = 53;
                stan::model::assign(prob, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            logistic(a, b, concentration, pstream__), 
                            "assigning variable prob");
                current_statement_begin__ = 54;
                stan::model::assign(survival_sim, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            binomial_rng(get_base1(nreplicates, i, "nreplicates", 1), get_base1(prob, i, "prob", 1), base_rng__), 
                            "assigning variable survival_sim");
                }
            }
            current_statement_begin__ = 58;
            for (int i = 1; i <= nsample; ++i) {
                current_statement_begin__ = 59;
                stan::model::assign(ed50, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(phi, i, "phi", 1) * pow(stan::math::exp(-(a)), (-(1.0) / b))), 
                            "assigning variable ed50");
            }
            // validate, write generated quantities
            current_statement_begin__ = 42;
            size_t survival_sim_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < survival_sim_j_1_max__; ++j_1__) {
                vars__.push_back(survival_sim(j_1__));
            }
            current_statement_begin__ = 43;
            size_t prob_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < prob_j_1_max__; ++j_1__) {
                vars__.push_back(prob(j_1__));
            }
            current_statement_begin__ = 44;
            size_t ed50_i_0_max__ = nsample;
            for (size_t i_0__ = 0; i_0__ < ed50_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ed50[i_0__]", ed50[i_0__], 0);
            }
            size_t ed50_k_0_max__ = nsample;
            for (size_t k_0__ = 0; k_0__ < ed50_k_0_max__; ++k_0__) {
                vars__.push_back(ed50[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_modelwithppc";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        size_t phi_k_0_max__ = nsample;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t survival_sim_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < survival_sim_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "survival_sim" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t prob_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < prob_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ed50_k_0_max__ = nsample;
        for (size_t k_0__ = 0; k_0__ < ed50_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ed50" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        size_t phi_k_0_max__ = nsample;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t survival_sim_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < survival_sim_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "survival_sim" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t prob_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < prob_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ed50_k_0_max__ = nsample;
        for (size_t k_0__ = 0; k_0__ < ed50_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ed50" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_modelwithppc_namespace::model_modelwithppc stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
